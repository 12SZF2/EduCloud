openapi: 3.0.0

info:
  title: User and Module Management API
  version: 1.0.0
  description: API for managing users, modules, and related operations. 

servers:
  - url: http://localhost:3300
    description: Local server

security:
  - ApiKeyAuth: []

paths:
  /api/users:
    get:
      summary: List all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully

  /api/users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
    delete:
      summary: Delete a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully

  /api/modules:
    get:
      summary: List all modules
      responses:
        '200':
          description: List of modules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Module'
    post:
      summary: Create a new module
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Module'
      responses:
        '201':
          description: Module created successfully

  /api/modules/{id}:
    get:
      summary: Get a module by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Module details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
    put:
      summary: Update a module by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Module'
      responses:
        '200':
          description: Module updated successfully
    delete:
      summary: Delete a module by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Module deleted successfully

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: janipatrik138
        displayed_name:
          type: string
          example: Faur István
        email:
          type: string
          format: email
          example: janipatrik138@example.com
        birth_date:
          type: string
          format: date
          example: 2005-06-25
        created_date:
          type: string
          format: date
          example: 2024-06-25

    Module:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: C# alapok
        grade:
          type: string
          example: 13. évf.
        category:
          type: string
          example: Asztali alkalmazás
        profession:
          type: string
          example: Szoftverfejlesztő
        description:
          type: string
          example: This module covers the basics of C# programming.
        date:
          type: string
          format: date
          example: 2024-06-25
